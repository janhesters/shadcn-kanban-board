generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  id                        String                        @id @default(cuid(2))
  supabaseUserId            String                        @unique
  createdAt                 DateTime                      @default(now())
  updatedAt                 DateTime                      @updatedAt
  email                     String                        @unique
  name                      String                        @default("")
  imageUrl                  String                        @default("")
  memberships               OrganizationMembership[]
  createdInviteLinks        OrganizationInviteLink[]
  usedInviteLinks           InviteLinkUse[]
  createdEmailInvites       OrganizationEmailInviteLink[]
  stripeSubscriptionsBought StripeSubscription[]
  notificationPanels        NotificationPanel[]
  notificationRecipient     NotificationRecipient[]
}

model Organization {
  id                          String                        @id() @default(cuid(2))
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  name                        String
  /// We avoid conflicts from slugs by using Prisma middleware. See the file
  /// `app/utils/database.server.ts`.
  slug                        String                        @unique
  imageUrl                    String                        @default("")
  billingEmail                String                        @default("")
  stripeCustomerId            String?                       @unique
  /// We set this to 14 days from now by default in the Prisma middleware.
  trialEnd                    DateTime
  memberships                 OrganizationMembership[]
  organizationInviteLinks     OrganizationInviteLink[]
  organizationEmailInviteLink OrganizationEmailInviteLink[]
  stripeSubscriptions         StripeSubscription[]
  notificationPanels          NotificationPanel[]
  notifications               Notification[]
}

enum OrganizationMembershipRole {
  owner
  admin
  member
}

model OrganizationMembership {
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  member         UserAccount                @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId       String
  organization   Organization               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  deactivatedAt  DateTime?
  role           OrganizationMembershipRole @default(member)

  @@id([memberId, organizationId])
}

model OrganizationInviteLink {
  id             String          @id @default(cuid(2))
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  // The user who created the invite link. If the creator is deleted, the
  // `creatorId` will be null, which is why this property is optional.
  creator        UserAccount?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId      String?
  // Users who used the invite link.
  linkUsages     InviteLinkUse[]
  // The date when the invite link expires.
  expiresAt      DateTime
  // The token that is used to authenticate the invite link.
  token          String          @unique @default(cuid(2))
  // The date when the link was manually deactivated.
  deactivatedAt  DateTime?
}

model InviteLinkUse {
  id           String                 @id @default(cuid(2))
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  // The invite link that was used.
  inviteLink   OrganizationInviteLink @relation(fields: [inviteLinkId], references: [id], onDelete: Cascade)
  inviteLinkId String
  // The user who used the invite link.
  user         UserAccount?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?

  @@unique([inviteLinkId, userId])
}

model OrganizationEmailInviteLink {
  id             String                     @id @default(cuid(2))
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  organization   Organization               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  invitedBy      UserAccount?               @relation(fields: [invitedById], references: [id], onDelete: SetNull)
  invitedById    String?
  email          String
  token          String                     @unique @default(cuid(2))
  role           OrganizationMembershipRole @default(member)
  expiresAt      DateTime
  deactivatedAt  DateTime?
}

model ContactSalesFormSubmission {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  companyName String
  firstName   String
  lastName    String
  message     String   @default("")
  phoneNumber String   @default("")
  workEmail   String
}

// Stripe models

model StripeProduct {
  stripeId String        @id
  name     String
  /// Max seats is set via the `metadata` field of the product as `max_seats`.
  maxSeats Int
  prices   StripePrice[]
  active   Boolean
}

enum StripeSubscriptionStatus {
  /// The subscription is paid and active.
  active
  /// The subscription is canceled. This status is terminal. The user will
  /// need to resubscribe from scratch again.
  canceled
  /// The initial payment for the subscription failed. Stripe is waiting for
  /// the first invoice to be paid. Only metadata and default_source can be
  /// updated.
  incomplete
  /// The subscription's first invoice wasn't paid within 23 hours. The
  /// subscription has expired without ever becoming active. This status is
  /// terminal.
  incomplete_expired
  /// A recurring invoice payment failed after a previously active subscription.
  /// Stripe automatically retries the payment (up to 4 times over about 3–4
  /// weeks by default, using Smart Retries). If all retries fail, the
  /// subscription moves to canceled or unpaid, depending on your subscription
  /// settings.
  past_due
  /// The subscription is temporarily paused. No invoices are generated during
  /// the pause.
  paused
  /// The subscription is in a free trial period before the first payment is due.
  trialing
  /// Payment has failed and all retry attempts have been exhausted. The
  /// subscription remains technically active but is marked as unpaid. New
  /// invoices are not generated.
  unpaid
}

model StripeSubscription {
  /// The Stripe subscription's real ID
  stripeId       String       @id
  /// One‐to‐many with Organization
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  /// Who purchased it
  purchasedBy    UserAccount? @relation(fields: [purchasedById], references: [id], onDelete: SetNull)
  purchasedById  String?

  /// Time at which the object was created. Stripe measures it in in seconds
  /// since the Unix epoch, but we convert it to a Date.
  created           DateTime
  /// If the subscription has been canceled with the at_period_end flag set to
  /// true, cancel_at_period_end on the subscription will be true. You can use
  /// this attribute to determine whether a subscription that has a status of
  /// active is scheduled to be canceled at the end of the current period.
  cancelAtPeriodEnd Boolean
  /// List of subscription items, each with an attached price.
  items             StripeSubscriptionItem[]
  /// Possible values are incomplete, incomplete_expired, trialing, active,
  /// past_due, canceled, unpaid, or paused.
  status            StripeSubscriptionStatus
  /// A subscription can have only one schedule.
  schedule          StripeSubscriptionSchedule?
}

model StripeSubscriptionItem {
  stripeId             String             @id
  stripeSubscription   StripeSubscription @relation(fields: [stripeSubscriptionId], references: [stripeId], onDelete: Cascade)
  stripeSubscriptionId String
  /// End of the current period that the subscription item has been invoiced for.
  /// At the end of this period, a new invoice will be created.
  currentPeriodEnd     DateTime
  /// Start of the current period that the subscription item has been invoiced for.
  currentPeriodStart   DateTime
  price                StripePrice        @relation(fields: [priceId], references: [stripeId], onDelete: Cascade)
  priceId              String
}

enum StripePriceInterval {
  day
  week
  month
  year
}

model StripePrice {
  stripeId          String                            @id
  lookupKey         String                            @unique
  product           StripeProduct                     @relation(fields: [productId], references: [stripeId], onDelete: Cascade)
  productId         String
  currency          String
  active            Boolean
  unitAmount        Int
  interval          StripePriceInterval
  subscriptionItems StripeSubscriptionItem[]
  schedulePhases    StripeSubscriptionSchedulePhase[]
}

model StripeSubscriptionSchedule {
  stripeId          String                            @id
  subscriptionId    String                            @unique
  subscription      StripeSubscription                @relation(fields: [subscriptionId], references: [stripeId], onDelete: Cascade)
  created           DateTime
  currentPhaseStart DateTime?
  currentPhaseEnd   DateTime?
  phases            StripeSubscriptionSchedulePhase[]
}

model StripeSubscriptionSchedulePhase {
  id         String                     @id @default(cuid(2))
  scheduleId String
  schedule   StripeSubscriptionSchedule @relation(fields: [scheduleId], references: [stripeId], onDelete: Cascade)
  startDate  DateTime
  endDate    DateTime
  priceId    String
  price      StripePrice                @relation(fields: [priceId], references: [stripeId], onDelete: Cascade)
  quantity   Int
}

// Notification models

model Notification {
  id             String                  @id @default(cuid(2))
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  organization   Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  content        Json
  recipients     NotificationRecipient[]
}

model NotificationRecipient {
  id             String       @id @default(cuid(2))
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String
  user           UserAccount  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  /// When the user marked it read
  readAt         DateTime?

  @@unique([notificationId, userId])
}

model NotificationPanel {
  id             String       @id @default(cuid(2))
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           UserAccount  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  /// When badge was last cleared
  lastOpenedAt   DateTime?

  @@unique([userId, organizationId])
}

// Test models

/// A mock session table used exclusively for E2E testing.
/// This enables passing access tokens between MSW and the main application,
/// as Playwright's utilities cannot programmatically set access tokens directly
// for user login.
model MockAccessTokenSession {
  /// The access token used as the unique identifier for this mock session
  accessToken String @id
  /// The full mock session data stored as JSON, representing a Supabase session
  sessionData Json
}
