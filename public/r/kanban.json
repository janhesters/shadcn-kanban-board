{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "kanban",
  "type": "registry:component",
  "title": "Kanban Board",
  "description": "A Kanban board component with customizable circle colors.",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-tooltip"
  ],
  "registryDependencies": [
    "button",
    "skeleton",
    "textarea",
    "tooltip"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/kanban.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable unicorn/no-null */\nimport type {\n  ChangeEvent,\n  ComponentProps,\n  KeyboardEvent,\n  RefObject,\n} from 'react';\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useId,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { Button, buttonVariants } from '~/components/ui/button';\nimport { Skeleton } from '~/components/ui/skeleton';\nimport { Textarea } from '~/components/ui/textarea';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '~/components/ui/tooltip';\nimport { cn } from '~/lib/utils';\n\n/*\nAccessibility\n*/\n\nexport type KanbanBoardDndMonitorEventHandler = {\n  onDragStart?: (activeId: string) => void;\n  onDragMove?: (activeId: string, overId?: string) => void;\n  onDragOver?: (activeId: string, overId?: string) => void;\n  onDragEnd?: (activeId: string, overId?: string) => void;\n  onDragCancel?: (activeId: string) => void;\n};\n\nexport type KanbanBoardDndEventType = keyof KanbanBoardDndMonitorEventHandler;\n\nexport type KanbanBoardDndMonitorContextValue = {\n  activeIdRef: RefObject<string>;\n  draggableDescribedById: string;\n  registerMonitor: (monitor: KanbanBoardDndMonitorEventHandler) => void;\n  unregisterMonitor: (monitor: KanbanBoardDndMonitorEventHandler) => void;\n  triggerEvent: (\n    eventType: KanbanBoardDndEventType,\n    activeId: string,\n    overId?: string,\n  ) => void;\n};\n\nexport const KanbanBoardContext = createContext<\n  KanbanBoardDndMonitorContextValue | undefined\n>(undefined);\n\nfunction useDndMonitor(monitor: KanbanBoardDndMonitorEventHandler) {\n  const context = useContext(KanbanBoardContext);\n  if (!context) {\n    throw new Error('useDndMonitor must be used within a DndMonitorProvider');\n  }\n\n  const { registerMonitor, unregisterMonitor } = context;\n\n  useEffect(() => {\n    registerMonitor(monitor);\n    return () => {\n      unregisterMonitor(monitor);\n    };\n  }, [monitor, registerMonitor, unregisterMonitor]);\n}\n\nexport function useDndEvents() {\n  const context = useContext(KanbanBoardContext);\n\n  if (!context) {\n    throw new Error('useDndEvents must be used within a DndMonitorProvider');\n  }\n\n  const { activeIdRef, draggableDescribedById, triggerEvent } = context;\n\n  const onDragStart = useCallback(\n    (activeId: string) => {\n      activeIdRef.current = activeId;\n      triggerEvent('onDragStart', activeId);\n    },\n    [triggerEvent, activeIdRef],\n  );\n\n  const onDragMove = useCallback(\n    (activeId: string, overId?: string) => {\n      triggerEvent('onDragMove', activeId, overId);\n    },\n    [triggerEvent],\n  );\n\n  const onDragOver = useCallback(\n    (activeId: string, overId?: string) => {\n      // If the activeId is not provided, use the activeId from the ref.\n      const actualActiveId = activeId || activeIdRef.current;\n      triggerEvent('onDragOver', actualActiveId, overId);\n    },\n    [triggerEvent, activeIdRef],\n  );\n\n  const onDragEnd = useCallback(\n    (activeId: string, overId?: string) => {\n      triggerEvent('onDragEnd', activeId, overId);\n    },\n    [triggerEvent],\n  );\n\n  const onDragCancel = useCallback(\n    (activeId: string) => {\n      triggerEvent('onDragCancel', activeId);\n    },\n    [triggerEvent],\n  );\n\n  return {\n    draggableDescribedById,\n    onDragStart,\n    onDragMove,\n    onDragOver,\n    onDragEnd,\n    onDragCancel,\n  };\n}\n\nexport const defaultScreenReaderInstructions = `\nTo pick up a draggable item, press the space bar.\nWhile dragging, use the arrow keys to move the item.\nPress space again to drop the item in its new position, or press escape to cancel.\n`;\n\nexport type KanbanBoardAnnouncements = {\n  onDragStart: (activeId: string) => string;\n  onDragMove?: (activeId: string, overId?: string) => string | undefined;\n  onDragOver: (activeId: string, overId?: string) => string;\n  onDragEnd: (activeId: string, overId?: string) => string;\n  onDragCancel: (activeId: string) => string;\n};\n\nexport const defaultAnnouncements: KanbanBoardAnnouncements = {\n  onDragStart(activeId) {\n    return `Picked up draggable item ${activeId}.`;\n  },\n  onDragOver(activeId, overId) {\n    if (overId) {\n      return `Draggable item ${activeId} was moved over droppable area ${overId}.`;\n    }\n\n    return `Draggable item ${activeId} is no longer over a droppable area.`;\n  },\n  onDragEnd(activeId, overId) {\n    if (overId) {\n      return `Draggable item ${activeId} was dropped over droppable area ${overId}`;\n    }\n\n    return `Draggable item ${activeId} was dropped.`;\n  },\n  onDragCancel(activeId) {\n    return `Dragging was cancelled. Draggable item ${activeId} was dropped.`;\n  },\n};\n\nexport type KanbanBoardLiveRegionProps = {\n  id: string;\n  announcement: string;\n  ariaLiveType?: 'polite' | 'assertive' | 'off';\n};\n\nexport function KanbanBoardLiveRegion({\n  announcement,\n  ariaLiveType = 'assertive',\n  className,\n  id,\n  ref,\n  ...props\n}: ComponentProps<'div'> & KanbanBoardLiveRegionProps) {\n  return (\n    <div\n      aria-live={ariaLiveType}\n      aria-atomic\n      className={cn(\n        'clip-[rect(0_0_0_0)] clip-path-[inset(100%)] fixed top-0 left-0 -m-px h-px w-px overflow-hidden border-0 p-0 whitespace-nowrap',\n        className,\n      )}\n      id={id}\n      ref={ref}\n      role=\"status\"\n      {...props}\n    >\n      {announcement}\n    </div>\n  );\n}\n\nexport type KanbanBoardHiddenTextProps = {\n  id: string;\n  value: string;\n};\n\nexport function KanbanBoardHiddenText({\n  id,\n  value,\n  className,\n  ref,\n  ...props\n}: ComponentProps<'div'> & KanbanBoardHiddenTextProps) {\n  return (\n    <div id={id} className={cn('hidden', className)} ref={ref} {...props}>\n      {value}\n    </div>\n  );\n}\n\nexport function useAnnouncement() {\n  const [announcement, setAnnouncement] = useState('');\n  const announce = useCallback((value: string | undefined) => {\n    if (value != undefined) {\n      setAnnouncement(value);\n    }\n  }, []);\n\n  return { announce, announcement } as const;\n}\n\nexport type KanbanBoardAccessibilityProps = {\n  announcements?: KanbanBoardAnnouncements;\n  container?: Element;\n  screenReaderInstructions?: string;\n  hiddenTextDescribedById: string;\n};\n\nexport const KanbanBoardAccessibility = ({\n  announcements = defaultAnnouncements,\n  container,\n  hiddenTextDescribedById,\n  screenReaderInstructions = defaultScreenReaderInstructions,\n}: KanbanBoardAccessibilityProps) => {\n  const { announce, announcement } = useAnnouncement();\n  const liveRegionId = useId();\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useDndMonitor(\n    useMemo(\n      () => ({\n        onDragStart(activeId) {\n          announce(announcements.onDragStart(activeId));\n        },\n        onDragMove(activeId, overId) {\n          if (announcements.onDragMove) {\n            announce(announcements.onDragMove(activeId, overId));\n          }\n        },\n        onDragOver(activeId, overId) {\n          announce(announcements.onDragOver(activeId, overId));\n        },\n        onDragEnd(activeId, overId) {\n          announce(announcements.onDragEnd(activeId, overId));\n        },\n        onDragCancel(activeId) {\n          announce(announcements.onDragCancel(activeId));\n        },\n      }),\n      [announce, announcements],\n    ),\n  );\n\n  if (!mounted) {\n    return null;\n  }\n\n  const markup = (\n    <>\n      <KanbanBoardHiddenText\n        id={hiddenTextDescribedById}\n        value={screenReaderInstructions}\n      />\n      <KanbanBoardLiveRegion id={liveRegionId} announcement={announcement} />\n    </>\n  );\n\n  return container ? createPortal(markup, container) : markup;\n};\n\nexport type KanbanBoardProviderProps = {\n  announcements?: KanbanBoardAnnouncements;\n  screenReaderInstructions?: string;\n  container?: Element;\n  children: React.ReactNode;\n};\n\nexport const KanbanBoardProvider = ({\n  announcements,\n  screenReaderInstructions,\n  container,\n  children,\n}: KanbanBoardProviderProps) => {\n  const draggableDescribedById = useId();\n  const monitorsReference = useRef<KanbanBoardDndMonitorEventHandler[]>([]);\n  // Store the activeId in a ref to avoid re-rendering when it changes.\n  // This is useful for announcing the drag start and end when you lack access\n  // to the active ID, e.g. because you're using `onDragOver` from the\n  // `DataTransfer` API. When trying to access data during the dragover event\n  // using getData(), it will always return an empty string. This is a security\n  // restriction in the HTML5 Drag and Drop API - you cannot access the data\n  // during the dragover event, only during the drop event.\n  // @see https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\n  const activeIdReference = useRef<string>('');\n\n  const registerMonitor = useCallback(\n    (monitor: KanbanBoardDndMonitorEventHandler) => {\n      monitorsReference.current.push(monitor);\n    },\n    [],\n  );\n\n  const unregisterMonitor = useCallback(\n    (monitor: KanbanBoardDndMonitorEventHandler) => {\n      monitorsReference.current = monitorsReference.current.filter(\n        m => m !== monitor,\n      );\n    },\n    [],\n  );\n\n  const triggerEvent = useCallback(\n    (eventType: KanbanBoardDndEventType, activeId: string, overId?: string) => {\n      for (const monitor of monitorsReference.current) {\n        const handler = monitor[eventType];\n        if (handler) {\n          handler(activeId, overId);\n        }\n      }\n    },\n    [],\n  );\n\n  const contextValue = useMemo(\n    () => ({\n      activeIdRef: activeIdReference,\n      draggableDescribedById,\n      registerMonitor,\n      unregisterMonitor,\n      triggerEvent,\n    }),\n    [\n      activeIdReference,\n      draggableDescribedById,\n      registerMonitor,\n      unregisterMonitor,\n      triggerEvent,\n    ],\n  );\n\n  return (\n    <TooltipProvider>\n      <KanbanBoardContext.Provider value={contextValue}>\n        {children}\n        <KanbanBoardAccessibility\n          announcements={announcements}\n          screenReaderInstructions={screenReaderInstructions}\n          container={container}\n          hiddenTextDescribedById={draggableDescribedById}\n        />\n      </KanbanBoardContext.Provider>\n    </TooltipProvider>\n  );\n};\n\n/*\nConstants\n*/\n\n/**\n * Event data transfer types\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\n */\nconst DATA_TRANSFER_TYPES = {\n  CARD: 'kanban-board-card',\n};\n\nconst KANBAN_BOARD_CIRCLE_COLORS_MAP = {\n  primary: 'bg-kanban-board-circle-primary',\n  gray: 'bg-kanban-board-circle-gray',\n  red: 'bg-kanban-board-circle-red',\n  yellow: 'bg-kanban-board-circle-yellow',\n  green: 'bg-kanban-board-circle-green',\n  cyan: 'bg-kanban-board-circle-cyan',\n  blue: 'bg-kanban-board-circle-blue',\n  indigo: 'bg-kanban-board-circle-indigo',\n  violet: 'bg-kanban-board-circle-violet',\n  purple: 'bg-kanban-board-circle-purple',\n  pink: 'bg-kanban-board-circle-pink',\n};\n\nexport type KanbanBoardCircleColor =\n  keyof typeof KANBAN_BOARD_CIRCLE_COLORS_MAP;\n\nexport const KANBAN_BOARD_CIRCLE_COLORS = Object.keys(\n  KANBAN_BOARD_CIRCLE_COLORS_MAP,\n) as KanbanBoardCircleColor[];\n\n/*\nBoard\n*/\n\nexport function KanbanBoard({\n  className,\n  ref,\n  ...props\n}: ComponentProps<'div'>) {\n  return (\n    <div\n      className={cn(\n        'flex h-full flex-grow items-start gap-x-2 overflow-x-auto py-1',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n}\n\n/**\n * Add some extra margin to the right of the container to allow for scrolling\n * when adding a new column.\n */\nexport function KanbanBoardExtraMargin({\n  className,\n  ref,\n  ...props\n}: ComponentProps<'div'>) {\n  return (\n    <div\n      className={cn('h-1 w-8 flex-shrink-0', className)}\n      ref={ref}\n      {...props}\n    />\n  );\n}\n\n/*\nColumn\n*/\n\nexport type KanbanBoardColumnProps = {\n  columnId: string;\n  onDropOverColumn?: (dataTransferData: string) => void;\n};\n\nexport const kanbanBoardColumnClassNames =\n  'w-64 flex-shrink-0 rounded-lg border flex flex-col border-border bg-sidebar py-2 max-h-full';\n\nexport function KanbanBoardColumn({\n  className,\n  columnId,\n  onDropOverColumn,\n  ref,\n  ...props\n}: ComponentProps<'section'> & KanbanBoardColumnProps) {\n  const [isDropTarget, setIsDropTarget] = useState(false);\n  const { onDragEnd, onDragOver } = useDndEvents();\n\n  return (\n    <section\n      aria-labelledby={`column-${columnId}-title`}\n      className={cn(\n        kanbanBoardColumnClassNames,\n        isDropTarget && 'border-primary',\n        className,\n      )}\n      onDragLeave={() => {\n        setIsDropTarget(false);\n      }}\n      onDragOver={event => {\n        if (event.dataTransfer.types.includes(DATA_TRANSFER_TYPES.CARD)) {\n          event.preventDefault();\n          setIsDropTarget(true);\n          onDragOver('', columnId);\n        }\n      }}\n      onDrop={event => {\n        const data = event.dataTransfer.getData(DATA_TRANSFER_TYPES.CARD);\n        onDropOverColumn?.(data);\n        onDragEnd(JSON.parse(data).id as string, columnId);\n        setIsDropTarget(false);\n      }}\n      ref={ref}\n      {...props}\n    />\n  );\n}\n\nexport function KanbanBoardColumnSkeleton() {\n  return (\n    <section className={cn(kanbanBoardColumnClassNames, 'h-full py-0')}>\n      <Skeleton className=\"h-full w-full\" />\n    </section>\n  );\n}\n\nexport function KanbanBoardColumnHeader({\n  className,\n  ref,\n  ...props\n}: ComponentProps<'div'>) {\n  return (\n    <div\n      className={cn('flex items-center justify-between px-2 py-1', className)}\n      ref={ref}\n      {...props}\n    />\n  );\n}\n\nexport type KanbanBoardColumnTitleProps = {\n  columnId: string;\n};\n\nexport function KanbanBoardColumnTitle({\n  className,\n  columnId,\n  ref,\n  ...props\n}: ComponentProps<'h2'> & KanbanBoardColumnTitleProps) {\n  return (\n    <h2\n      className={cn(\n        'text-muted-foreground inline-flex items-center text-sm font-medium',\n        className,\n      )}\n      ref={ref}\n      id={`column-${columnId}-title`}\n      {...props}\n    />\n  );\n}\n\nexport function KanbanBoardColumnIconButton({\n  className,\n  ref,\n  ...props\n}: ComponentProps<typeof Button>) {\n  return (\n    <Button\n      className={cn('text-muted-foreground size-6', className)}\n      variant=\"ghost\"\n      size=\"icon\"\n      ref={ref}\n      {...props}\n    />\n  );\n}\n\nexport type KanbanBoardColorCircleProps = {\n  color?: KanbanBoardCircleColor;\n};\n\nexport function KanbanColorCircle({\n  className,\n  color = 'primary',\n  ref,\n  ...props\n}: ComponentProps<'div'> & KanbanBoardColorCircleProps) {\n  return (\n    <div\n      className={cn(\n        'mr-2 size-2 rounded-full',\n        KANBAN_BOARD_CIRCLE_COLORS_MAP[color],\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n}\n\nexport function KanbanBoardColumnList({\n  className,\n  ref,\n  ...props\n}: ComponentProps<'ul'>) {\n  return (\n    <ul\n      className={cn('min-h-0.5 flex-grow overflow-y-auto', className)}\n      ref={ref}\n      {...props}\n    />\n  );\n}\n\nexport type KanbanBoardDropDirection = 'none' | 'top' | 'bottom';\n\nexport type KanbanBoardColumnListItemProps = {\n  cardId: string;\n  onDropOverListItem?: (\n    dataTransferData: string,\n    dropDirection: KanbanBoardDropDirection,\n  ) => void;\n};\n\nexport const kanbanBoardColumnListItemClassNames =\n  '-mb-[2px] border-b-2 border-t-2 border-b-transparent border-t-transparent px-2 py-1 last:mb-0';\n\nexport function KanbanBoardColumnListItem({\n  cardId,\n  className,\n  onDropOverListItem,\n  ref,\n  ...props\n}: ComponentProps<'li'> & KanbanBoardColumnListItemProps) {\n  const [dropDirection, setDropDirection] =\n    useState<KanbanBoardDropDirection>('none');\n  const { onDragOver, onDragEnd } = useDndEvents();\n\n  return (\n    <li\n      className={cn(\n        kanbanBoardColumnListItemClassNames,\n        dropDirection === 'top' && 'border-t-primary',\n        dropDirection === 'bottom' && 'border-b-primary',\n        className,\n      )}\n      onDragLeave={() => {\n        setDropDirection('none');\n      }}\n      onDragOver={event => {\n        if (event.dataTransfer.types.includes(DATA_TRANSFER_TYPES.CARD)) {\n          event.preventDefault();\n          event.stopPropagation();\n          const rect = event.currentTarget.getBoundingClientRect();\n          const midpoint = (rect.top + rect.bottom) / 2;\n          setDropDirection(event.clientY <= midpoint ? 'top' : 'bottom');\n          onDragOver('', cardId);\n        }\n      }}\n      onDrop={event => {\n        event.stopPropagation();\n        const data = event.dataTransfer.getData(DATA_TRANSFER_TYPES.CARD);\n        onDropOverListItem?.(data, dropDirection);\n\n        onDragEnd(JSON.parse(data).id as string, cardId);\n        setDropDirection('none');\n      }}\n      ref={ref}\n      {...props}\n    />\n  );\n}\n\nexport function KanbanBoardColumnFooter({\n  className,\n  ref,\n  ...props\n}: ComponentProps<'div'>) {\n  return (\n    <div\n      className={cn('flex items-center justify-between px-2 pt-1', className)}\n      ref={ref}\n      {...props}\n    />\n  );\n}\n\nexport function KanbanBoardColumnButton({\n  className,\n  ref,\n  ...props\n}: ComponentProps<typeof Button>) {\n  return (\n    <Button\n      className={cn(\n        'bg-sidebar text-primary hover:text-primary/80 w-full justify-start',\n        className,\n      )}\n      variant=\"outline\"\n      size=\"sm\"\n      ref={ref}\n      {...props}\n    />\n  );\n}\n\n/*\nCard\n*/\n\nexport type KanbanBoardCardProps<T extends { id: string } = { id: string }> = {\n  /**\n   * A string representing the data to add to the DataTransfer.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setData#data\n   */\n  data: T;\n  /**\n   * Whether the card is being moved with the keyboard.\n   */\n  isActive?: boolean;\n};\n\nconst kanbanBoardCardClassNames =\n  'rounded-lg border border-border bg-background p-3 text-start text-foreground shadow-sm';\n\nexport function KanbanBoardCard({\n  className,\n  data,\n  isActive = false,\n  ref,\n  ...props\n}: ComponentProps<'button'> & KanbanBoardCardProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const { draggableDescribedById, onDragStart } = useDndEvents();\n\n  return (\n    <button\n      aria-describedby={draggableDescribedById}\n      aria-roledescription=\"draggable\"\n      className={cn(\n        kanbanBoardCardClassNames,\n        'focus-visible:ring-ring inline-flex w-full cursor-grab touch-manipulation flex-col gap-1 focus-visible:ring-1 focus-visible:outline-none',\n        isDragging\n          ? 'cursor-grabbing active:cursor-grabbing'\n          : 'group relative',\n        isActive && 'rotate-1 transform shadow-lg',\n        className,\n      )}\n      draggable\n      onDragStart={event => {\n        setIsDragging(true);\n        event.dataTransfer.effectAllowed = 'move';\n        event.dataTransfer.setData(\n          DATA_TRANSFER_TYPES.CARD,\n          JSON.stringify(data),\n        );\n        // Remove outline from the card when dragging.\n        event.currentTarget.blur();\n\n        onDragStart(data.id);\n      }}\n      onDragEnd={() => {\n        setIsDragging(false);\n      }}\n      ref={ref}\n      {...props}\n    />\n  );\n}\n\nexport function KanbanBoardCardTitle({\n  className,\n  ref,\n  ...props\n}: ComponentProps<'h3'>) {\n  return (\n    <h3 className={cn('text-sm font-medium', className)} ref={ref} {...props} />\n  );\n}\n\nexport function KanbanBoardCardDescription({\n  className,\n  ref,\n  ...props\n}: ComponentProps<'p'>) {\n  return (\n    <p\n      className={cn(\n        'text-card-foreground text-xs leading-5 whitespace-pre-wrap',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n}\n\nexport function KanbanBoardCardTextarea({\n  className,\n  onChange,\n  value,\n  ref: externalReference,\n  ...props\n}: ComponentProps<'textarea'>) {\n  const internalReference = useRef<HTMLTextAreaElement | null>(null);\n\n  /**\n   * Adjusts the height of the textarea to handle cases where the text exceeds\n   * the width of the Textarea and wraps around to the next line.\n   */\n  const adjustTextareaHeight = () => {\n    if (internalReference.current) {\n      internalReference.current.style.height = 'auto'; // Reset height to recalculate.\n      internalReference.current.style.height = `${internalReference.current.scrollHeight}px`;\n    }\n  };\n\n  useEffect(() => {\n    // When the component mounts, adjust the height of the textarea. This\n    // prevents a bug where the text area is too short when the component\n    // mounts and has long text.\n    adjustTextareaHeight();\n  }, []);\n\n  useEffect(() => {\n    // When the value is emptied, adjust the height of the textarea. This\n    // prevents a bug where the text area is too short when the component\n    // is emptied and had long text before being emptied.\n    if (value === '') {\n      adjustTextareaHeight();\n    }\n  }, [value]);\n\n  function handleChange(event: ChangeEvent<HTMLTextAreaElement>) {\n    onChange?.(event);\n    adjustTextareaHeight();\n  }\n\n  // Expose the internal ref to the possible external ref.\n  useImperativeHandle(externalReference, () => internalReference.current!);\n\n  return (\n    <Textarea\n      className={cn(\n        kanbanBoardCardClassNames,\n        'min-h-min resize-none overflow-hidden text-xs leading-5',\n        className,\n      )}\n      onChange={handleChange}\n      rows={1}\n      value={value}\n      ref={internalReference}\n      {...props}\n    />\n  );\n}\n\nexport type KanbanBoardCardButtonGroupProps = {\n  disabled?: boolean;\n};\n\nexport function KanbanBoardCardButtonGroup({\n  className,\n  disabled = false,\n  ref,\n  ...props\n}: ComponentProps<'div'> & KanbanBoardCardButtonGroupProps) {\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'bg-background absolute top-2.5 right-2.5 z-40 hidden items-center',\n        !disabled && 'group-focus-within:flex group-hover:flex',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport type KanbanBoardCardButtonProps = {\n  tooltip?: string;\n};\n\n/**\n * A button that can be used within a KanbanBoardCard.\n * It's a div under the hood because you shouldn't nest buttons within buttons,\n * and the card is a button.\n */\nexport function KanbanBoardCardButton({\n  className,\n  tooltip,\n  ref: externalReference,\n  ...props\n}: ComponentProps<'div'> & KanbanBoardCardButtonProps) {\n  const internalReference = useRef<HTMLDivElement | null>(null);\n\n  useImperativeHandle(externalReference, () => internalReference.current!);\n\n  // Handler for keydown events to emulate button behavior.\n  const handleKeyDown = (event: KeyboardEvent<HTMLDivElement>) => {\n    // Check if the pressed key is 'Enter' or 'Space'.\n    if (event.key === 'Enter' || event.key === ' ') {\n      // Prevent default behavior (like scrolling on Space).\n      event.preventDefault();\n      // Prevent the event from bubbling up to parent elements.\n      event.stopPropagation();\n\n      // Simulate a click on the div.\n      internalReference.current?.click();\n    }\n  };\n\n  const button = (\n    <div\n      className={cn(\n        buttonVariants({ size: 'icon', variant: 'ghost' }),\n        'border-border size-5 border hover:cursor-default [&_svg]:size-3.5',\n        className,\n      )}\n      onKeyDown={handleKeyDown}\n      role=\"button\"\n      tabIndex={0}\n      ref={internalReference}\n      {...props}\n    />\n  );\n\n  if (!tooltip) {\n    return button;\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n\n      <TooltipContent align=\"center\" side=\"bottom\">\n        {tooltip}\n      </TooltipContent>\n    </Tooltip>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "app/components/ui/button.tsx",
      "content": "import { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport * as React from 'react';\n\nimport { cn } from '~/lib/utils';\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'text-destructive hover-text-foreground bg-secondary border border-border hover:text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:hover:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "app/lib/utils.ts",
      "content": "import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "app/components/ui/skeleton.tsx",
      "content": "import { cn } from '~/lib/utils';\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn('bg-accent animate-pulse rounded-md', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Skeleton };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "app/components/ui/textarea.tsx",
      "content": "import * as React from 'react';\n\nimport { cn } from '~/lib/utils';\n\nfunction Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Textarea };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "app/components/ui/tooltip.tsx",
      "content": "import * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport * as React from 'react';\n\nimport { cn } from '~/lib/utils';\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  );\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  );\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-muted text-foreground border-border animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md border px-3 py-1.5 text-xs text-balance',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-muted fill-muted z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px] border-r border-b\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n}\n\nexport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger };\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "cssVars": {
    "theme": {
      "kanban-board-circle-primary": "var(--primary)"
    },
    "light": {
      "kanban-board-circle-blue": "oklch(0.6232 0.1879 259.80)",
      "kanban-board-circle-cyan": "oklch(0.7146 0.1256 215.13)",
      "kanban-board-circle-gray": "oklch(0.5513 0.0233 264.36)",
      "kanban-board-circle-green": "oklch(0.7229 0.1921 149.58)",
      "kanban-board-circle-indigo": "oklch(0.5860 0.2037 277.12)",
      "kanban-board-circle-pink": "oklch(0.6559 0.2117 354.34)",
      "kanban-board-circle-purple": "oklch(0.6267 0.2325 303.86)",
      "kanban-board-circle-red": "oklch(0.6368 0.2078 25.33)",
      "kanban-board-circle-violet": "oklch(0.6059 0.2187 292.72)",
      "kanban-board-circle-yellow": "oklch(0.7959 0.1618 86.05)"
    },
    "dark": {
      "kanban-board-circle-blue": "oklch(0.7135 0.1435 254.61)",
      "kanban-board-circle-cyan": "oklch(0.7973 0.1339 211.45)",
      "kanban-board-circle-gray": "oklch(0.7137 0.0192 261.33)",
      "kanban-board-circle-green": "oklch(0.8003 0.1823 151.70)",
      "kanban-board-circle-indigo": "oklch(0.6797 0.1586 276.96)",
      "kanban-board-circle-pink": "oklch(0.7253 0.1752 349.74)",
      "kanban-board-circle-purple": "oklch(0.7218 0.1766 305.51)",
      "kanban-board-circle-red": "oklch(0.7108 0.1660 22.21)",
      "kanban-board-circle-violet": "oklch(0.7093 0.1589 293.52)",
      "kanban-board-circle-yellow": "oklch(0.8601 0.1730 91.84)"
    }
  },
  "css": {
    "@layer base": {
      ":root": {
        "--color-kanban-board-circle-blue": "var(--kanban-board-circle-blue)",
        "--color-kanban-board-circle-cyan": "var(--kanban-board-circle-cyan)",
        "--color-kanban-board-circle-gray": "var(--kanban-board-circle-gray)",
        "--color-kanban-board-circle-green": "var(--kanban-board-circle-green)",
        "--color-kanban-board-circle-indigo": "var(--kanban-board-circle-indigo)",
        "--color-kanban-board-circle-pink": "var(--kanban-board-circle-pink)",
        "--color-kanban-board-circle-primary": "var(--kanban-board-circle-primary)",
        "--color-kanban-board-circle-purple": "var(--kanban-board-circle-purple)",
        "--color-kanban-board-circle-red": "var(--kanban-board-circle-red)",
        "--color-kanban-board-circle-violet": "var(--kanban-board-circle-violet)",
        "--color-kanban-board-circle-yellow": "var(--kanban-board-circle-yellow)"
      }
    }
  }
}